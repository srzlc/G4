#include "S3TrackerHit.hh"
#include "G4UnitsTable.hh"
#include "G4VVisManager.hh"
#include "G4Circle.hh"
#include "G4Colour.hh"
#include "G4VisAttributes.hh"
#include <iomanip>
G4ThreadLocal G4Allocator<S3TrackerHit>* S3TrackerHitAllocator = 0;
//////
S3TrackerHit::S3TrackerHit() : G4VHit(),fEnergyDeposit(0),fTrackID(-1),
fPrePos(G4ThreeVector()),fPostPos(G4ThreeVector()),
fParticleName("")
{}
S3TrackerHit::~S3TrackerHit() {}
//////
S3TrackerHit::S3TrackerHit(const S3TrackerHit& right) : G4VHit()
{
  fTrackID      = right.fTrackID;
  fEnergyDeposit= right.fEnergyDeposit;
  fPrePos       = right.fPrePos;
  fPostPos      = right.fPostPos;
  fParticleName = right.fParticleName;
}
//////
const S3TrackerHit& S3TrackerHit::operator=(const S3TrackerHit& right)
{
  fTrackID      = right.fTrackID;
  fEnergyDeposit= right.fEnergyDeposit;
  fPrePos       = right.fPrePos;
  fPostPos      = right.fPostPos;
  fParticleName = right.fParticleName;
  return* this;
}
G4bool S3TrackerHit::operator==(const S3TrackerHit& right) const
{
  return (this == &right) ? true : false;
}
void S3TrackerHit::Draw()
{
  G4VVisManager* pVVisManager = G4VVisManager::GetConcreteInstance();
  if(pVVisManager)
  {
    G4Circle circle(fPostPos);
    circle.SetScreenSize(4.);
    circle.SetFillStyle(G4Circle::filled);
    G4Colour colour(1.,0.,0.);
    G4VisAttributes attribs(colour);
    circle.SetVisAttributes(attribs);
    pVVisManager->Draw(circle);
  } 
}
