#ifndef S3TrackerHit_h
#define S3TrackerHit_h 1
#include "G4VHit.hh"
#include "G4Allocator.hh"
#include "G4ThreeVector.hh"
#include "G4Threading.hh"
#include "G4THitsCollection.hh"
#include "tls.hh"
//It defines data members to store the the energy deposit and track lengths
// of charged particles in a selected volume:
// - fEdep, fTrackLength
class S3TrackerHit : public G4VHit
{
  public:
             S3TrackerHit();
             S3TrackerHit(const S3TrackerHit&);
    virtual ~S3TrackerHit();
  //operators
    const S3TrackerHit& operator=(const S3TrackerHit&);
    G4bool operator==(const S3TrackerHit&) const;
    inline void* operator new(size_t);
    inline void  operator delete(void*);
  //methods from base class
    virtual void Draw();
  //virtual void Print();
  //methods to handle data
    void SetTrackID  (G4int track)           {fTrackID = track;}
    void SetPrePos   (G4ThreeVector xyz)     {fPrePos  = xyz;}
    void SetPostPos  (G4ThreeVector xyz)     {fPostPos = xyz;} 
    void SetParticle (G4String name)         {name     = fParticleName;} 
  //get methods
    G4int         GetTrackID()       const  {return fTrackID;}
    G4ThreeVector GetPos()           const  {return fPrePos;}
    G4String      GetParticleName()  const  {return fParticleName;} 
  //get deposit energy
    inline void SetEnergyDeposit(G4double energy) {fEnergyDeposit=energy;}
    inline double GetTotalEnergyDeposit()         {return fEnergyDeposit;}
  private:
    G4double       fEnergyDeposit;
    G4int          fTrackID;
    G4ThreeVector  fPrePos;
    G4ThreeVector  fPostPos;
    G4String       fParticleName;
};
typedef G4THitsCollection<S3TrackerHit> S3TrackerHitsCollection;
extern G4ThreadLocal G4Allocator<S3TrackerHit>* S3TrackerHitAllocator;
inline void* S3TrackerHit::operator new(size_t)
{
  if(!S3TrackerHitAllocator)
  {
    S3TrackerHitAllocator = new G4Allocator<S3TrackerHit>;
  }  
  void* hit;
  hit = (void * )S3TrackerHitAllocator->MallocSingle();  
  return hit;
}
inline void S3TrackerHit::operator delete(void *hit)
{
  if(!S3TrackerHitAllocator)
  {
    S3TrackerHitAllocator = new G4Allocator<S3TrackerHit>;
  }
  S3TrackerHitAllocator->FreeSingle((S3TrackerHit*) hit);
}
#endif


