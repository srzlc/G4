begin:control
  nx = 240
  ny = nx/3
  nz = ny

  # Final time of simulation
  t_end = 75 * femto

  # Size of domain
  x_min = -12 * micron
  x_max = -x_min
  y_min = x_min
  y_max = x_max
  z_min = x_min
  z_max = x_max

  stdout_frequency = 10

  maxwell_solver = custom
  dt_multiplier = 1
end:control


begin:boundaries
  bc_x_min = simple_laser
  bc_x_max = open
  bc_y_min = periodic
  bc_y_max = periodic
  bc_z_min = periodic
  bc_z_max = periodic
end:boundaries


begin:constant
  lambda0 = 0.5 * micron
  theta = 0.0
end:constant


begin:laser
  boundary = x_min
  intensity_w_cm2 = 1.0e15
  lambda = lambda0 * cos(theta)
  # phase = -2.0 * pi * y * sin(theta) / lambda0
  # polarisation_angle = 0 # pi / 2.0
  profile = gauss(r_yz,0,4*micron)
  t_profile = gauss(time,8*femto,1.8*femto)
end:laser


begin:output
  # Simulated time between output dumps
  dt_snapshot = 25 * femto

  # Properties on grid
  grid = always
  #ex = always
  ey = always
  #ez = always
  #bx = always
  #by = always
  #bz = always
end:output


begin:stencil
  # These coefficients have been calculated with
  # optimize_stencil.py version 0.2+1.g0d913ee

  # using the command line
  # "optimize_stencil.py --dim 3 --Y 3 --Z 3 --dt-multiplier 0.99 --N 1 --weight xaxis_soft"

  dt = 0.9493391116848393 * dx / c
  betaxy = 0.06041451023625669
  betaxz = 0.06030251774679948
  betayx = 0.06041451023625669
  betayz = -0.017481592735549903
  betazx = 0.06030251774679948
  betazy = -0.017481592735549903
  deltax = -0.02187397991068981
  deltay = -0.3160037968338166
  deltaz = -0.3149437496680533
end:stencil
